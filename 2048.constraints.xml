<?xwml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="http://www.cad.polito.it/ugp3/transforms/constraintsScripted.xslt"?>
<constraints
    xmlns="http://www.cad.polito.it/ugp3/schemas/constraints" 
    id="One-Max" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    schemaLocation="http://www.cad.polito.it/ugp3/schemas/constraints http://www.cad.polito.it/ugp3/schemas/constraints.xsd">
  <typeDefinitions>
    <item type="constant" name="action">
      <value>Action.RIGHT</value>
      <value>Action.LEFT</value>
      <value>Action.UP</value>
      <value>Action.DOWN</value>
    </item>
    <item type="constant" name="typeCondition">
      <value>isEmpty</value>
      <value>isEqual</value>
      <value>isGreaterThan</value>
      <value>isOneLower</value>
      <value>positionEqual</value>
      <value>canSum</value>
      <value>ranking</value>
    </item>

  
    <item type="constant" name="typeResult">
      <value>false,false,true</value>
      <value>false,true,false</value>
      <value>true,false,false</value>
      <value>true,false,true</value>
      <value>true,true,false</value>
    </item>
    <item type="constant" name="operator">
      <value>==</value>
      <value>&lt;</value>
      <value>&gt;</value>
    </item>
    <item type="constant" name="tile">
        <value>valmax</value>
        <value>2</value>
        <value>4</value>
        <value>8</value>
        <value>16</value>
        <value>32</value>
        <value>64</value>
        <value>128</value>
        <value>256</value>
        <value>512</value>
        <value>1024</value>
        <value>2048</value>
        <value>4096</value>
	<value>8192</value>
        <value>16384</value>
        <value>32768</value>
        <value>65536</value>
    </item>
    <item type="constant" name="EmptyNot">
	<value>!</value>
	<value> </value>
    </item>
    <item type="constant" name="AndOr">
	<value>||</value>
	<value>&amp;&amp;</value>
    </item>
  </typeDefinitions>
  <commentFormat><value/></commentFormat>
  <identifierFormat>n<value /></identifierFormat>
  <labelFormat><value/>: </labelFormat>
  <uniqueTagFormat><value /></uniqueTagFormat>
  <prologue id="globalPrologue"/>
  <epilogue id="globalEpilogue"/>
  <sections>
    <section id="bitString" prologueEpilogueCompulsory="false">
      <prologue id="sectionPrologue">
	<expression>
	import java.time.Duration;
	import java.util.List;
	import java.util.Random;
	import put.game2048.*;

	public class MyAgent implements Agent {
   		public Random random = new Random(123);

    		// A nonparametric constructor is required
		public int res(boolean bScore,boolean bGoto, boolean bTakeAction){
			if(!bScore &amp;&amp; !bGoto &amp;&amp; bTakeAction)
				return 0;
			else if(!bScore &amp;&amp; bGoto &amp;&amp; !bTakeAction)	
				return 1;
			else if(bScore &amp;&amp; !bGoto &amp;&amp; !bTakeAction)	
				return 2;
			else if(bScore &amp;&amp; !bGoto &amp;&amp; bTakeAction)	
				return 3;
			else if(bScore &amp;&amp; bGoto &amp;&amp; !bTakeAction)	
				return 4;
			else
				return -1;
								
		}
		public Action takeAction(List&lt;Action&gt; possibleActions,int scoreRIGHT,int scoreLEFT,int scoreUP,int scoreDOWN){
			Action maxAct=possibleActions.get(0);
			int maxScore=0;		
			for(int i=0;i&lt;possibleActions.size();++i){
				int score_i=0;
				if(possibleActions.get(i)==Action.RIGHT)
					score_i=scoreRIGHT;
				else if(possibleActions.get(i)==Action.LEFT)
					score_i=scoreLEFT;
				else if(possibleActions.get(i)==Action.UP)
					score_i=scoreUP;
				else
					score_i=scoreDOWN;

				if(score_i>maxScore){
					maxAct=possibleActions.get(i);
					maxScore=score_i;
				}												
			}
			return maxAct;
		}
    		public int HighestValue(Board board){
			int valmax=0;
			for(int i = 0;i&lt;4;++i){
				for(int j = 0;j&lt;4;++j){
					if(board.get()[i][j]&gt;valmax)
						valmax=board.get()[i][j];				
				}		
			}
			return valmax;
		}


		public boolean isEqual(int x1, int y1, int x2, int y2, Board board, int useless_val){
			return (board.get()[x1][y1] == board.get()[x2][y2]);
		}

		public boolean isGreaterThan(int x1, int y1, int x2, int y2, Board board, int useless_val){
			return (board.get()[x1][y1] &gt; board.get()[x2][y2]);
		}

		public boolean isOneLower(int x1, int y1, int x2, int y2, Board board, int useless_val){
			return ((board.get()[x2][y2]) / 2 == (board.get()[x1][y1]));
		}

		public boolean positionEqual(int x1, int y1, int useless_val1, int useless_val2, Board board, int val){
			return (board.get()[x1][y1] == val);	
		}

		public boolean isEmpty(int x1, int y1, int useless_parameter1, int useless_parameter2, Board board, int useless_val){
			return (board.get()[x1][y1] == 0);
		}

		public boolean canSum(int x1, int y1, int x2, int y2, Board board, int useless_val){
			if(board.get()[x1][y1] != board.get()[x2][y2]){
				return false;
			}
			if(x1 == x2){
				if(y1 == y2){
					return false;
				}
				int to_add;
				if(y1 > y2){
					to_add = -1;
				}else{
					to_add = 1;
				}
				y1 += to_add;
				while(y1 != y2){
					if(board.get()[x1][y1] != 0){
						return false;
					}
					y1 += to_add;
				}
				return true;
			}else if(y1 == y2){
				if(x1 == x2){
					return false;
				}
				int to_add;
				if(x1 > x2){
					to_add = -1;
				}else{
					to_add = 1;
				}
				x1 += to_add;
				while(x1 != x2){
					if(board.get()[x1][y1] != 0){
						return false;
					}
					x1 += to_add;
				}
				return true;
			}
			return false;
		}

		public boolean ranking(int x1, int y1, int useless_parameter1, int useless_parameter2, Board board, int val){
			int max = HighestValue(board);
			int b = board.get()[x1][y1];
if(b==0)

return false;
			int rank = 2;
			while(max &gt; b){
				b *= 2;
				rank *= 2;
			}
			return (rank == val);
		}

		/** timeLimit will always be 1 ms */
    		public Action chooseAction(Board board, List&lt;Action&gt; possibleActions, Duration timeLimit) {
        		int goto_switch = 1;
        		int scoreUP = 0;
			int scoreDOWN=0;
			int scoreRIGHT=0;
			int scoreLEFT=0;
			int res_ret=-1;
			int valmax=HighestValue(board);
			for(int instr=1;instr &lt; 10000;++instr){
        			switch(goto_switch){			
	</expression>
      </prologue>
      <epilogue id="sectionEpilogue">
	<expression>
				default:
					return possibleActions.get(random.nextInt(possibleActions.size()));
					
				}
			}
            		return possibleActions.get(random.nextInt(possibleActions.size()));
    		}
	}
	</expression>
      </epilogue>
      <subSections>
	<subSection id="main" maxOccurs="1" minOccurs="1" maxReferences="0">
	  <prologue id="stringPrologue"/>
	  <epilogue id="stringEpilogue"/>
	  
<macros maxOccurs="200" minOccurs="200" averageOccurs="200" sigma="60">
	    <macro id="simpleIfAction">
	      <expression>
					case case_replace:		
						if (<param ref="Emptnot"/><param ref="tcond"/>(<param ref="idx_x1"/>, <param ref="idx_y1"/>,<param ref="idx_x2"/>, <param ref="idx_y2"/>, board ,<param ref="valTile"/> )) {
            						res_ret=res(<param ref="tRes"/>);
							if(res_ret==2 ||res_ret==3||res_ret==4){
								scoreUP+=<param ref="sUP"/>;
								scoreDOWN+=<param ref="sDOWN"/>;
								scoreRIGHT+=<param ref="sRIGHT"/>;
								scoreLEFT+=<param ref="sLEFT"/>;
							}
							if(res_ret==1||res_ret==4){
								goto_switch=<param ref="nGOTO"/>;
							}	
							if(res_ret==0 || res_ret==3){								
								return takeAction(possibleActions,scoreUP,scoreDOWN,scoreRIGHT,scoreLEFT);
							}				
						}else{
							res_ret=res(<param ref="tRes2"/>);
							if(res_ret==2 ||res_ret==3||res_ret==4){
								scoreUP+=<param ref="sUP2"/>;
								scoreDOWN+=<param ref="sDOWN2"/>;
								scoreRIGHT+=<param ref="sRIGHT2"/>;
								scoreLEFT+=<param ref="sLEFT2"/>;
							}
							if(res_ret==1||res_ret==4){
								goto_switch=<param ref="nGOTO2"/>;
							}	
							if(res_ret==0 || res_ret==3){	
								return takeAction(possibleActions,scoreUP,scoreDOWN,scoreRIGHT,scoreLEFT);
							}		
						}
	      </expression>
	   
	      <parameters>
		<item type="definedType" ref="EmptyNot" name="Emptnot"/>		
	      	<item type="integer"  minimum="1" maximum="200" name="nGOTO"/>
		<item type="definedType" ref="typeResult" name="tRes"/>
		<item type="integer" minimum="0" maximum="5" name="sUP"/>
		<item type="integer" minimum="0" maximum="5" name="sDOWN"/>
		<item type="integer" minimum="0" maximum="5" name="sRIGHT"/>
		<item type="integer" minimum="0" maximum="5" name="sLEFT"/>
	      	<item type="integer"  minimum="1" maximum="200" name="nGOTO2"/>
		<item type="definedType" ref="typeResult" name="tRes2"/>
		<item type="integer" minimum="0" maximum="5" name="sUP2"/>
		<item type="integer" minimum="0" maximum="5" name="sDOWN2"/>
		<item type="integer" minimum="0" maximum="5" name="sRIGHT2"/>
		<item type="integer" minimum="0" maximum="5" name="sLEFT2"/>
		<item type="definedType" ref="tile" name="valTile"/>
		<item type="integer" minimum="0" maximum="3" name="idx_x1"/>
		<item type="integer" minimum="0" maximum="3" name="idx_y1"/>
		<item type="integer" minimum="0" maximum="3" name="idx_x2"/>
		<item type="integer" minimum="0" maximum="3" name="idx_y2"/>
		<item type="definedType" ref="typeCondition" name="tcond"/>
	      </parameters>
	    </macro>


	<macro id="doubleIfAction">
	      <expression>
					case case_replace:		
						if (<param ref="Emptnot"/><param ref="tcond"/>(<param ref="idx_x1"/>, <param ref="idx_y1"/>,<param ref="idx_x2"/>, <param ref="idx_y2"/>, board ,<param ref="valTile"/>) <param ref="op"/> <param ref="Emptnot_2"/><param ref="tcond2"/>(<param ref="idx_x1_2"/>, <param ref="idx_y1_2"/>,<param ref="idx_x2_2"/>, <param ref="idx_y2_2"/>, board ,<param ref="valTile_2"/>) ){
            						res_ret=res(<param ref="tRes"/>);
							if(res_ret==2 ||res_ret==3||res_ret==4){
								scoreUP+=<param ref="sUP"/>;
								scoreDOWN+=<param ref="sDOWN"/>;
								scoreRIGHT+=<param ref="sRIGHT"/>;
								scoreLEFT+=<param ref="sLEFT"/>;
							}
							if(res_ret==1||res_ret==4){
								goto_switch=<param ref="nGOTO"/>;
							}	
							if(res_ret==0 || res_ret==3){								
								return takeAction(possibleActions,scoreUP,scoreDOWN,scoreRIGHT,scoreLEFT);
							}				
						}else{
							res_ret=res(<param ref="tRes2"/>);
							if(res_ret==2 ||res_ret==3||res_ret==4){
								scoreUP+=<param ref="sUP2"/>;
								scoreDOWN+=<param ref="sDOWN2"/>;
								scoreRIGHT+=<param ref="sRIGHT2"/>;
								scoreLEFT+=<param ref="sLEFT2"/>;
							}
							if(res_ret==1||res_ret==4){
								goto_switch=<param ref="nGOTO2"/>;
							}	
							if(res_ret==0 || res_ret==3){	
								return takeAction(possibleActions,scoreUP,scoreDOWN,scoreRIGHT,scoreLEFT);
							}		
						}
	      </expression>
	   
	      <parameters>
		<item type="definedType" ref="EmptyNot" name="Emptnot"/>
		<item type="definedType" ref="EmptyNot" name="Emptnot_2"/>		
	      	<item type="integer"  minimum="1" maximum="200" name="nGOTO"/>
		<item type="definedType" ref="typeResult" name="tRes"/>
		<item type="integer" minimum="0" maximum="5" name="sUP"/>
		<item type="integer" minimum="0" maximum="5" name="sDOWN"/>
		<item type="integer" minimum="0" maximum="5" name="sRIGHT"/>
		<item type="integer" minimum="0" maximum="5" name="sLEFT"/>
	      	<item type="integer"  minimum="1" maximum="200" name="nGOTO2"/>
		<item type="definedType" ref="typeResult" name="tRes2"/>
		<item type="integer" minimum="0" maximum="5" name="sUP2"/>
		<item type="integer" minimum="0" maximum="5" name="sDOWN2"/>
		<item type="integer" minimum="0" maximum="5" name="sRIGHT2"/>
		<item type="integer" minimum="0" maximum="5" name="sLEFT2"/>
		<item type="definedType" ref="tile" name="valTile"/>
		<item type="integer" minimum="0" maximum="3" name="idx_x1"/>
		<item type="integer" minimum="0" maximum="3" name="idx_y1"/>
		<item type="integer" minimum="0" maximum="3" name="idx_x2"/>
		<item type="integer" minimum="0" maximum="3" name="idx_y2"/>
		<item type="definedType" ref="typeCondition" name="tcond"/>
		<item type="definedType" ref="tile" name="valTile_2"/>
		<item type="integer" minimum="0" maximum="3" name="idx_x1_2"/>
		<item type="integer" minimum="0" maximum="3" name="idx_y1_2"/>
		<item type="integer" minimum="0" maximum="3" name="idx_x2_2"/>
		<item type="integer" minimum="0" maximum="3" name="idx_y2_2"/>
		<item type="definedType" ref="typeCondition" name="tcond2"/>
		<item type="definedType" ref="AndOr" name="op"/>
	      </parameters>
	    </macro>
	   
 
	  </macros>
	</subSection>
      </subSections>   
    </section>
  </sections>
</constraints>
