<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="http://www.cad.polito.it/ugp3/transforms/constraintsScripted.xslt"?>
<constraints
    xmlns="http://www.cad.polito.it/ugp3/schemas/constraints" 
    id="One-Max" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    schemaLocation="http://www.cad.polito.it/ugp3/schemas/constraints http://www.cad.polito.it/ugp3/schemas/constraints.xsd">
  <typeDefinitions>
    <item type="constant" name="action">
      <value>Action.RIGHT</value>
      <value>Action.LEFT</value>
      <value>Action.UP</value>
      <value>Action.DOWN</value>
    </item>
    <item type="constant" name="operator">
      <value>==</value>
      <value>&lt;</value>
      <value>&gt;</value>
    </item>
    <item type="constant" name="tile">
	<value>0</value>
        <value>2</value>
        <value>4</value>
        <value>8</value>
        <value>16</value>
        <value>32</value>
        <value>64</value>
        <value>128</value>
        <value>256</value>
        <value>512</value>
        <value>1024</value>
        <value>2048</value>
        <value>4096</value>
	<value>8192</value>
        <value>16384</value>
        <value>32768</value>
        <value>65536</value>
    </item>
    <item type="constant" name="AndOr">
	<value>||</value>
	<value>&amp;&amp;</value>
    </item>
  </typeDefinitions>
  <commentFormat><value/></commentFormat>
  <identifierFormat>n<value /></identifierFormat>
  <labelFormat><value/>: </labelFormat>
  <uniqueTagFormat><value /></uniqueTagFormat>
  <prologue id="globalPrologue"/>
  <epilogue id="globalEpilogue"/>
  <sections>
    <section id="bitString" prologueEpilogueCompulsory="false">
      <prologue id="sectionPrologue">
	<expression>
	import java.time.Duration;
	import java.util.List;
	import java.util.Random;
	import put.game2048.*;

	public class MyAgent implements Agent {
   		public Random random = new Random(123);

    		// A nonparametric constructor is required

    		/** timeLimit will always be 1 ms */
    		public Action chooseAction(Board board, List possibleActions, Duration timeLimit) {
        		int goto_switch = 1;
        		for(int instr=1;instr &lt; 10000;++i){
        			switch(goto_switch){			
	</expression>
      </prologue>
      <epilogue id="sectionEpilogue">
	<ram ref="op_comp"/>expression>
				default:
					return possibleActions.get(random.nextInt(possibleActions.size()));
					
				}
			}
            		return possibleActions.get(random.nextInt(possibleActions.size()));
    		}
	}
	</expression>
      </epilogue>
      <subSections>
	<subSection id="main" maxOccurs="1" minOccurs="1" maxReferences="0">
	  <prologue id="stringPrologue"/>
	  <epilogue id="stringEpilogue"/>
	  
	  <macros maxOccurs="500" minOccurs="500" averageOccurs="500" sigma="60">
	    <macro id="simpleIfAction">
	      <expression>
					case <param ref="case_nb"/>:		
						if (board.board[<param ref="idx_x1"/>][<param ref="idx_y1"/>] <param ref="op_comp"/> board.board[<param ref="idx_x2"/>][<param ref="idx_y2"/>] &amp; possibleActions.contains(<param ref="act"/>) {
            						return <param ref="act"/>;
						}
	      </expression>
	      
	      <parameters>
		<item type="definedType" ref="action" name="act" />		
	      	<item type="integer"  minimum=1 maximum=500 name="case_nb"/>
		<item type="integer" minimum=0 maximum=3 name="idx_x1"/>
		<item type="integer" minimum=0 maximum=3 name="idx_y1"/>
		<item type="integer" minimum=0 maximum=3 name="idx_x2"/>
		<item type="integer" minimum=0 maximum=3 name="idx_y2"/>
		<item type="definedType" ref="operator" name="op_comp"/>
	      </parameters>
	    </macro>

	    <macro id="gotoAction">
              <expression>
                                        case <param ref="case_nb"/>:
                                                if (board.board[<param ref="idx_x1"/>][<param ref="idx_y1"/>] <param ref="op_comp"/> board.board[<param ref="idx_x2"/>][<param ref="idx_y2"/>] ) {
                                                        goto_switch=<param ref="num_goto"/>;
                                                        break;
                                                }
              </expression>

              <parameters>
                <item type="integer"  minimum=1 maximum=500 name="case_nb"/>
                <item type="integer"  minimum=1 maximum=500 name="num_goto"/>
                <item type="integer" minimum=0 maximum=3 name="idx_x1"/>
                <item type="integer" minimum=0 maximum=3 name="idx_y1"/>
                <item type="integer" minimum=0 maximum=3 name="idx_x2"/>
                <item type="integer" minimum=0 maximum=3 name="idx_y2"/>
                <item type="definedType" ref="operator" name="op_comp"/>
              </parameters>
            </macro>


	   <macro id="doubleIfAction">
              <expression>
                                        case <param ref="case_nb"/>:
                                                if (board.board[<param ref="idx_x1"/>][<param ref="idx_y1"/>] == <param ref="nb_tile1"/> <param ref="AndOr1"/> board.board[<param ref="idx_x2"/>][<param ref="idx_y2"/>] == <param ref="nb_tile2"/> ) {
                                                        goto_switch=<param ref="num_goto"/>;
                                                        break;
                                                }
              </expression>

              <parameters>
	        <item type="definedType" ref="tile" name="nb_tile1"/>
	        <item type="definedType" ref="tile" name="nb_tile2"/>
		<item type="definedType" ref="AndOr" name="AndOr1"/>
                <item type="integer"  minimum=1 maximum=500 name="case_nb"/>
                <item type="integer"  minimum=1 maximum=500 name="num_goto"/>
                <item type="integer" minimum=0 maximum=3 name="idx_x1"/>
                <item type="integer" minimum=0 maximum=3 name="idx_y1"/>
                <item type="integer" minimum=0 maximum=3 name="idx_x2"/>
                <item type="integer" minimum=0 maximum=3 name="idx_y2"/>
              </parameters>
            </macro>
 
	  </macros>
	</subSection>
      </subSections>   
    </section>
  </sections>
</constraints>
